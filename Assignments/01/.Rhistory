hist(data=t_vals[1,], xName='weight')
hist(x=t_vals[1,], xName='weight')
hist(x=t_vals[1,])
hist(x=t_vals[1,], bins=20)
hist(x=t_vals[1,], breaks=20)
hist(x=t_vals[1,], breaks=20, main = params[1,])
View(params)
params[1,]
str(parms[,1])
str(params[,1])
str(params[1,])
print(str(params[1,]))
hist(x=t_vals[1,], breaks=20, main = "test" + params[1,1])
params[1,1]
hist(x=t_vals[1,], breaks=20, main = "test" + str(params[1,1]))
hist(x=t_vals[1,], breaks=20, main = paste0("test", params[1,1]))
hist(x=t_vals[1,], breaks=20, main = paste0("dist 1: ", params[1,1]))
hist(x=t_vals[1,], breaks=20, main = paste0("dist 1: ", params[1,1], " N=", params[1,2], " v=", params[1,3]))
hist(x=t_vals[1,], breaks=20, main = paste0("DIST 1: ", params[1,1], " n=", params[1,2], " v=", params[1,3]))
hist(x=t_vals[1,], breaks=20, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3]))
i
hist(x=t_vals[1,], breaks=20, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3]
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6]))
hist(x=t_vals[1,], breaks=20, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6]))
hist(x=t_vals[1,], breaks=100, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6]))
hist(x=t_vals[1,], breaks=50, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6]))
ggplot(t_vals[1,]), +
ggplot(t_vals[1,]) +
geom_histogram()
# convert matrix to dataframe
df_t_vals = as.data.frame(as.table(t_vals))
ggplot(df_t_vals[1,]) +
geom_histogram()
ggplot(df_t_vals[1,]) +
geom_histogram()
ggplot(x=df_t_vals[1,]) +
geom_histogram()
ggplot(df_t_vals, aes(df_t_vals[1,])) +
geom_histogram()
hist(x=t_vals[1,], breaks=50, main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6]))
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t"
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
x <- seq(-4, 4, length=100)
lines(x, dt(x,degf[10-2]), lwd=2, col=red)
lines(x, dt(x, 10-2), lwd=2, col=red)
lines(x, dt(x, 10-2), lwd=2)
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2), lwd=2)
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2)*1000, lwd=2)
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, rt(x, 10-2)*1000, lwd=2)
hist(x=t_vals[1,],
breaks=50,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2)*100, lwd=2)
hist(x=t_vals[1,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2), lwd=2)
hist(x=t_vals[1,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6],
"\n")
)
lines(x, dt(x, 10-2), lwd=2)
hist(x=t_vals[1,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"\nDIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2), lwd=2)
hist(x=t_vals[1,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[1,1], ", n=", params[1,2], ", v=", params[1,3],
"  ||  DIST 2: ", params[1,4], ", n=", params[1,5], ", v=", params[1,6])
)
lines(x, dt(x, 10-2), lwd=2)
n = 10
sd = sqrt(1)
qt(0.975,df=n-2)*sd/sqrt(n)
dt(0.975,df=n-2)*sd/sqrt(n)
qt(0.975,df=n-2)*sd/sqrt(n)
n = 10
qt(0.975,df=n-2)*sd/sqrt(n)
n = 30
qt(0.975,df=n-2)*sd/sqrt(n)
calc_middle <- function(N){
# 8 DOF
if (N[1]+N[2] == 10){
val = 2.262
}
# 18 DOF
if (N[1]+N[2] == 20){
val = 2.101
}
# 28 DOF
if (N[1]+N[2] == 30){
val = 2.048
}
}
iterations = 1000
Ns = list(c(5,5), c(5,15), c(15,15))
variances = list(c(1,1), c(1,4), c(4,4))
dist1 = 'norm'
dist2 = 'norm'
# initialize matrix
t_vals = matrix(ncol = iterations, nrow = 9)
# initialize a dataframe to hold parameters
params= data.frame(dist1 = NA, dist1_N = NA, dist1_var = NA, dist2 = NA, dist2_N = NA, dist2_var = NA, theoretical_95 = NA)
# create a counter
counter = 1
for (N in Ns){
for (variance in variances){
# create list based on parameters
t_95 = calc_middle(N)
params = rbind(params, c(dist1, N[1], variance[1], dist2, N[2], variance[2], t_95))
# calculate t values for parameters
t_vals[counter,] = t_calcs(N, variance, dist1, dist2)
# add 1 to counter
counter=counter+1
}
}
# clean up params
params = params[-1,]
rownames(params) <- seq(length=nrow(params))
calc_middle <- function(N){
# 8 DOF
if (N[1]+N[2] == 10){
val = 2.262
}
# 18 DOF
if (N[1]+N[2] == 20){
val = 2.101
}
# 28 DOF
if (N[1]+N[2] == 30){
val = 2.048
}
return(val)
}
iterations = 1000
Ns = list(c(5,5), c(5,15), c(15,15))
variances = list(c(1,1), c(1,4), c(4,4))
dist1 = 'norm'
dist2 = 'norm'
# initialize matrix
t_vals = matrix(ncol = iterations, nrow = 9)
# initialize a dataframe to hold parameters
params= data.frame(dist1 = NA, dist1_N = NA, dist1_var = NA, dist2 = NA, dist2_N = NA, dist2_var = NA, theoretical_95 = NA)
# create a counter
counter = 1
for (N in Ns){
for (variance in variances){
# create list based on parameters
t_95 = calc_middle(N)
params = rbind(params, c(dist1, N[1], variance[1], dist2, N[2], variance[2], t_95))
# calculate t values for parameters
t_vals[counter,] = t_calcs(N, variance, dist1, dist2)
# add 1 to counter
counter=counter+1
}
}
# clean up params
params = params[-1,]
rownames(params) <- seq(length=nrow(params))
calc_middle <- function(N){
# 8 DOF
if (N[1]+N[2] == 10){
val = 2.262
}
# 18 DOF
if (N[1]+N[2] == 20){
val = 2.101
}
# 28 DOF
if (N[1]+N[2] == 30){
val = 2.048
}
return(val)
}
iterations = 1000
Ns = list(c(5,5), c(5,15), c(15,15))
variances = list(c(1,1), c(1,4), c(4,4))
dist1 = 'norm'
dist2 = 'norm'
# initialize matrix
t_vals = matrix(ncol = iterations, nrow = 9)
# initialize a dataframe to hold parameters
params= data.frame(dist1 = NA, dist1_N = NA, dist1_var = NA, dist2 = NA, dist2_N = NA, dist2_var = NA,
theoretical_95 = NA, actual_95 = NA)
# create a counter
counter = 1
for (N in Ns){
for (variance in variances){
# calculate t values for parameters
t_vals[counter,] = t_calcs(N, variance, dist1, dist2)
# create list based on parameters
t_95 = calc_middle(N)
a_95 = sum(t_vals > t_95)/iterations
params = rbind(params, c(dist1, N[1], variance[1], dist2, N[2], variance[2], t_95, a_95))
# add 1 to counter
counter=counter+1
}
}
# clean up params
params = params[-1,]
rownames(params) <- seq(length=nrow(params))
iterations = 1000
Ns = list(c(5,5), c(5,15), c(15,15))
variances = list(c(1,1), c(1,4), c(4,4))
dist1 = 'norm'
dist2 = 'norm'
# initialize matrix
t_vals = matrix(ncol = iterations, nrow = 9)
# initialize a dataframe to hold parameters
params= data.frame(dist1 = NA, dist1_N = NA, dist1_var = NA, dist2 = NA, dist2_N = NA, dist2_var = NA,
theoretical_95 = NA, actual_95 = NA)
# create a counter
counter = 1
for (N in Ns){
for (variance in variances){
# calculate t values for parameters
t_vals[counter,] = t_calcs(N, variance, dist1, dist2)
# create list based on parameters
t_95 = calc_middle(N)
a_95 = sum(abs(t_vals[counter,]) > t_95)/iterations
params = rbind(params, c(dist1, N[1], variance[1], dist2, N[2], variance[2], t_95, a_95))
# add 1 to counter
counter=counter+1
}
}
# clean up params
params = params[-1,]
rownames(params) <- seq(length=nrow(params))
# which row
x = 1
dof = params$dist1_N[x] + params$dist2_N[x]
params$dist1_N
params$dist1_N[1]
as.numeric(params$dist1_N[1])
dof = as.numeric(params$dist1_N[x]) + as.numeric(params$dist2_N[x])
# which row
x = 1
dof = as.numeric(params$dist1_N[x]) + as.numeric(params$dist2_N[x])
hist(x=t_vals[x,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[x,1], ", n=", params[x,2], ", v=", params[x,3],
"  ||  DIST 2: ", params[x,4], ", n=", params[x,5], ", v=", params[x,6])
)
lines(x, dt(x, dof-2), lwd=2)
x <- seq(-4, 4, length=100)
plot(x, main = "Stopping Distance versus Speed")
# which row
x = 1
dof = as.numeric(params$dist1_N[x]) + as.numeric(params$dist2_N[x])
hist(x=t_vals[x,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[x,1], ", n=", params[x,2], ", v=", params[x,3],
"  ||  DIST 2: ", params[x,4], ", n=", params[x,5], ", v=", params[x,6])
)
lines(x, dt(x, dof-2), lwd=2)
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[x]) + as.numeric(params$dist2_N[x])
x <- seq(-4, 4, length=100)
hist(x=t_vals[x,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6])
)
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[x]) + as.numeric(params$dist2_N[x])
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6])
)
lines(range, dt(x, dof-2), lwd=2)
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6])
)
lines(x, dt(x, dof-2), lwd=2)
params$actual_95[param_combo]
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6]),
sub = paste0("% beyond 95% center: ", params$actual_95[param_combo])
)
lines(x, dt(x, dof-2), lwd=2)
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6]),
sub = paste0("% beyond 95% center: ", params$actual_95[param_combo])
)
lines(x, dt(x, dof-2), lwd=2)
abline(v = 2)
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6]),
sub = paste0("% beyond 95% center: ", params$actual_95[param_combo])
)
lines(x, dt(x, dof-2), lwd=2)
abline(v = as.numeric(params$theoretical_95[param_combo]))
abline(v = -1 * as.numeric(params$theoretical_95[param_combo]))
# which row
param_combo = 1
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6]),
sub = paste0("% beyond 95% center: ", params$actual_95[param_combo])
)
lines(x, dt(x, dof-2), lwd=2)
abline(v = as.numeric(params$theoretical_95[param_combo]), col="red")
abline(v = -1 * as.numeric(params$theoretical_95[param_combo]), col="red")
plot_tests(1, t_vals, params)
# which row
plot_tests <- function(param_combo, t_vals, params){
dof = as.numeric(params$dist1_N[param_combo]) + as.numeric(params$dist2_N[param_combo])
x <- seq(-4, 4, length=100)
hist(x=t_vals[param_combo,],
breaks=50,
freq = FALSE,
xlab = "Value of t",
main = paste0("DIST 1: ", params[param_combo,1], ", n=", params[param_combo,2], ", v=", params[param_combo,3],
"  ||  DIST 2: ", params[param_combo,4], ", n=", params[param_combo,5], ", v=", params[param_combo,6]),
sub = paste0("% beyond 95% center: ", params$actual_95[param_combo])
)
lines(x, dt(x, dof-2), lwd=2)
abline(v = as.numeric(params$theoretical_95[param_combo]), col="red")
abline(v = -1 * as.numeric(params$theoretical_95[param_combo]), col="red")
}
plot_tests(1, t_vals, params)
for (i in 1:9){
plot_tests(1, t_vals, params)
}
for (i in 1:9){
plot_tests(i, t_vals, params)
}
par(mfrow=c(3,3))
for (i in 1:9){
plot_tests(i, t_vals, params)
}
compute_t_vals(1000, 'norm', 'norm')
compute_t_vals <- function(dist1, dist2, iterations){
Ns = list(c(5,5), c(5,15), c(15,15))
variances = list(c(1,1), c(1,4), c(4,4))
# initialize matrix
t_vals = matrix(ncol = iterations, nrow = 9)
# initialize a dataframe to hold parameters
params= data.frame(dist1 = NA, dist1_N = NA, dist1_var = NA, dist2 = NA, dist2_N = NA, dist2_var = NA,
theoretical_95 = NA, actual_95 = NA)
# create a counter
counter = 1
for (N in Ns){
for (variance in variances){
# calculate t values for parameters
t_vals[counter,] = t_calcs(N, variance, dist1, dist2)
# create list based on parameters
t_95 = calc_middle(N)
a_95 = sum(abs(t_vals[counter,]) > t_95)/iterations
params = rbind(params, c(dist1, N[1], variance[1], dist2, N[2], variance[2], t_95, a_95))
# add 1 to counter
counter=counter+1
}
}
# clean up params
params = params[-1,]
rownames(params) <- seq(length=nrow(params))
}
compute_t_vals(1000, 'norm', 'norm')
compute_t_vals('norm', 'norm', 1000)
par(mfrow=c(3,3))
for (i in 1:9){
plot_tests(i, t_vals, params)
}
for (i in 1:9){
plot_tests(i, t_vals, params)
}
rexp?
exit
?rexp
mean(rexp(1000))
mean(rexp(100000))
# FUNCTION TO CALCULATE T VALS
t_calcs <- function(N, variance, dist1, dist2){
# check dist for first sample
if (dist1 == 'norm'){
sample1 = replicate(iterations, rnorm(N[1], mean=0, sd=sqrt(variance[1])))
}
else if(dist1 == 'exp'){
sample1 = replicate(iterations, rexp(N[1], mean=0, sd=sqrt(variance[1])))
}
else if(dist1 == 'unif'){
sample1 = replicate(iterations, runif(N[1], mean=0, sd=sqrt(variance[1])))
}
# check dist for second sample
if (dist1 == 'norm'){
sample2 = replicate(iterations, rnorm(N[2], mean=0, sd=sqrt(variance[2])))
}
else if(dist1 == 'exp'){
sample2 = replicate(iterations, rexp(N[2], rate = )-1)
}
else if(dist1 == 'unif'){
sample2 = replicate(iterations, runif(N[2], mean=0, sd=sqrt(variance[2])))
}
t_vector = rep(NA, iterations)
for (i in 1:iterations){
t_vector[i]= t.test(sample1[,i],sample2[,i], var.equal = TRUE)$statistic
}
return(t_vector)
}
compute_t_vals('norm', 'norm', 1000)
# PLOT
#par(mfrow=c(3,3))
for (i in 1:9){
plot_tests(i, t_vals, params)
}
compute_t_vals('norm', 'norm', 1000)
# PLOT
par(mfrow=c(3,3))
for (i in 1:9){
plot_tests(i, t_vals, params)
}
